#!/usr/bin/env node

/**
 * Teste do Sistema de Backup Autom√°tico
 * 100% autom√°tico, sem necessidade de credenciais externas
 */

import { AutomaticBackupSystem } from './server/backup/automatic-backup-system';

async function testBackupSystems() {
  console.log('üöÄ TESTE DO SISTEMA DE BACKUP AUTOM√ÅTICO');
  console.log('='.repeat(50));
  console.log('üéØ Sistema: Local + Email (100% autom√°tico)');
  console.log('üìß Email: Usando Resend j√° configurado');
  console.log('üìÅ Local: Salva backups com rota√ß√£o autom√°tica\n');

  const backupSystem = new AutomaticBackupSystem();

  console.log('üîç 1. TESTANDO CONECTIVIDADE DOS SISTEMAS...');
  console.log('-'.repeat(50));
  
  try {
    const systemTest = await backupSystem.testSystems();
    
    console.log(`üìÅ Sistema Local: ${systemTest.local ? '‚úÖ OK' : '‚ùå FALHA'}`);
    console.log(`üìß Sistema Email: ${systemTest.email ? '‚úÖ OK (Resend configurado)' : '‚ö†Ô∏è Resend n√£o configurado'}`);
    console.log(`üíæ Banco de Dados: ${systemTest.database ? '‚úÖ OK' : '‚ùå DATABASE_URL n√£o encontrado'}`);
    
    if (!systemTest.database) {
      console.log('\n‚ùå N√£o √© poss√≠vel continuar sem acesso ao banco de dados');
      process.exit(1);
    }
    
  } catch (error: any) {
    console.error('‚ùå Erro no teste de sistemas:', error.message);
    process.exit(1);
  }

  console.log('\nüîß 2. EXECUTANDO BACKUP DE TESTE...');
  console.log('-'.repeat(50));
  
  try {
    const result = await backupSystem.executeFullBackup();
    
    if (result.success) {
      console.log('\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!');
      console.log('üìä RESULTADOS:');
      
      if (result.localBackup?.success) {
        console.log(`   üìÅ Backup Local: ${result.localBackup.size} - ‚úÖ Criado`);
        if (result.localBackup.filePath) {
          console.log(`      Arquivo: ${result.localBackup.filePath}`);
        }
      } else {
        console.log(`   üìÅ Backup Local: ‚ùå ${result.localBackup?.error}`);
      }
      
      if (result.emailBackup?.success) {
        console.log(`   üìß Backup Email: ${result.emailBackup.size} - ‚úÖ Enviado`);
        console.log(`      Email enviado para: areanatan1@gmail.com`);
      } else {
        console.log(`   üìß Backup Email: ‚ùå ${result.emailBackup?.error}`);
      }
      
      console.log(`   ‚è±Ô∏è Tempo Total: ${((result.totalTime || 0) / 1000).toFixed(2)}s`);
      
    } else {
      console.log('\n‚ö†Ô∏è TESTE PARCIALMENTE CONCLU√çDO');
      console.log('Alguns sistemas podem ter falhado, mas pelo menos um backup foi criado');
    }
    
  } catch (error: any) {
    console.error('\n‚ùå ERRO NO TESTE DE BACKUP:', error.message);
    process.exit(1);
  }

  console.log('\nüìà 3. ESTAT√çSTICAS DOS BACKUPS...');
  console.log('-'.repeat(50));
  
  try {
    const stats = await backupSystem.getBackupStatistics();
    
    console.log(`üìä Total de Backups: ${stats.localStats.totalBackups}`);
    console.log(`üíæ Espa√ßo Usado: ${stats.localStats.totalSize}`);
    
    if (stats.localStats.newestBackup) {
      console.log(`üìÖ √öltimo Backup: ${stats.localStats.newestBackup.toLocaleString('pt-BR')}`);
    }
    
    if (stats.localStats.oldestBackup) {
      console.log(`üìÖ Primeiro Backup: ${stats.localStats.oldestBackup.toLocaleString('pt-BR')}`);
    }
    
    const statusEmoji = {
      'healthy': '‚úÖ',
      'warning': '‚ö†Ô∏è',
      'error': '‚ùå'
    }[stats.systemStatus];
    
    console.log(`üîã Status do Sistema: ${statusEmoji} ${stats.systemStatus.toUpperCase()}`);
    
  } catch (error: any) {
    console.warn('‚ö†Ô∏è Erro ao obter estat√≠sticas:', error.message);
  }

  console.log('\nüéâ TESTE COMPLETO!');
  console.log('='.repeat(50));
  console.log('‚úÖ Sistema de backup funcionando corretamente');
  console.log('üìÖ Backups autom√°ticos ser√£o executados diariamente √†s 3:00 AM');
  console.log('üìÅ Backups locais: /home/runner/workspace/backups (rota√ß√£o autom√°tica)');
  console.log('üìß Backups por email: areanatan1@gmail.com');
  console.log('‚öôÔ∏è  Para alterar configura√ß√µes, use as vari√°veis de ambiente:');
  console.log('    BACKUP_CRON_SCHEDULE (padr√£o: "0 3 * * *")');
  console.log('\nüí° Pr√≥ximo passo: Sistema j√° est√° ativo e funcionando!');
}

// Executar teste se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testBackupSystems()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('‚ùå Falha no teste:', error.message);
      process.exit(1);
    });
}

export { testBackupSystems };